<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lilystu.mapper.MonsterMapper">
    <!-- 实现findMonsterByAge
        test="age > 0" 不能用#{age}，无法取出参数值
            可以在Java代码里面的形参加上@Param注解
            例如：findMonsterByAge(@Param("age") Integer age);
    -->
    <select id="findMonsterByAge" resultType="Monster"
            parameterType="Integer">
        SELECT * FROM monster WHERE 1=1
        <if test="age > 0">
            AND age > #{age}
        </if>
    </select>

    <!-- 使用where 标签开始拼接
    where 标签的好处是. 会自动的加入where 子句.
    mybatis 会自动的去掉多余的AND
    -->
    <select id="findMonsterByIdAndName" parameterType="Monster" resultType="Monster">
        SELECT * FROM monster
        <where>
            <if test="id > 0">
                AND id > #{id}
            </if>
            <if test="name != null and name != ''">
                AND name = #{name}
            </if>
        </where>
    </select>

    <!-- findMonsterByIdAndName_choose[使用choose 标签]
        类似Java中的switch语句
    -->
    <select id="findMonsterByIdAndName_choose" parameterType="map"
            resultType="Monster">
        SELECT * FROM monster
        <choose>
            <!-- 这里test="name" 这name 就是你传入的map 参数对应的key -->
            <when test="name != null and name != ''">
                WHERE name = #{name}
            </when>
            <when test="id > 0">
                WHERE id > #{id}
            </when>
            <otherwise>
                WHERE 1 = 1
            </otherwise>
        </choose>
    </select>

<!--
    演示foreach 的标签使用
    ● 需求：查询monster_id 为20, 22, 34 的妖怪
    map.put("ids",Arrays.asList(20, 22, 34))
-->
    <select id="findMonsterById_forEach" parameterType="map" resultType="Monster">
        SELECT * FROM monster
        <if test="ids != null and ids != ''">
            <where>
                id IN
                <foreach collection="ids" item="id" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </where>
        </if>
    </select>

<!-- 了解trim 标签
    如果sql 语句有and | or 就替换成where
    默认的where只会去掉多余的and

    trim prefix="where" prefixOverrides="and|or|lily"
        加入where标签(前缀)，并且如果子句开头and、or、lily 就把他们去掉
-->
    <select id="findMonsterByName_Trim" parameterType="map" resultType="Monster">
        select * from monster
    <trim prefix="where" prefixOverrides="and|or|lily">
        <if test="name !=null and name!=''">
            and name=#{name}
        </if>
    </trim>
    </select>

    <!-- updateMonster_set set 标签-->
    <update id="updateMonster_set" parameterType="map">
        UPDATE monster
        <!-- 根据传入的值是否为空，来决定是否进行修改
            map.put("name",...)
            map.put("age",...)
            map.put("monster_id",...)
        -->
        <set>
            <if test="age != null and age != ''">
                age = #{age},
            </if>
            <if test="birthday != null and birthday != ''">
                birthday = #{birthday},
            </if>
            <if test="email != null and email != ''">
                email = #{email},
            </if>
            <if test="gender != null and gender != ''">
                gender = #{gender},
            </if>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="salary != null and salary != ''">
                salary = #{salary},
            </if>
        </set>
        WHERE id = #{id}
    </update>
</mapper>